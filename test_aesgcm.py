from cryptography.hazmat.primitives.ciphers.aead import AESGCM
from key_schedule_functions import KeyScheduleFunctions
import hashlib
from cryptography.hazmat.primitives.ciphers.aead import AESGCM
from common import ContentType, LEGACY_RECORD_VERSION
import struct

ciphertext = bytes.fromhex("24e02ad1c1a9f0798607d4d3d0c7e63c9866ceed5ae84f67b83333a6acada4d124592c62a117ae8fa1921e807928a60d3d5c9704")
traffic_secret = bytes.fromhex("f116b50d7cf32d2cc5999e93afe3706b549a1198bff1e35e259e752a81b36479")

key_funcs = KeyScheduleFunctions(hashlib.sha256)

server_key = key_funcs.hkdf_expand_label(traffic_secret, b"key", b"", 16)            
server_iv = key_funcs.hkdf_expand_label(traffic_secret, b"iv", b"", 12)

aad = struct.pack('>BHH', ContentType.APPLICATION_DATA, LEGACY_RECORD_VERSION, len(ciphertext))

aesgcm = AESGCM(server_key)
aesgcm.decrypt(server_iv, ciphertext, aad)

class RecordDecryptor:
    def __init__(self, traffic_secret, hkdf_expand_label, aead_class):
        key = hkdf_expand_label(traffic_secret, b"key", b"", 16)
        self.aead = aead_class(key)
        self.iv = hkdf_expand_label(traffic_secret, b"iv", b"", 12)
        self.seq = 0

    def decrypt(self, ciphertext):
        padded_seq = self.seq.to_bytes(len(self.iv), 'big')
        self.seq += 1
        nonce = bytes(a ^ b for a, b in zip(self.iv, padded_seq))
        aad = struct.pack('>BHH', ContentType.APPLICATION_DATA, LEGACY_RECORD_VERSION, len(ciphertext))
        decrypted = self.aead.decrypt(nonce, ciphertext, aad)
        return decrypted

recordDecryptor = RecordDecryptor(traffic_secret, key_funcs.hkdf_expand_label, AESGCM)
ciphertext = bytes.fromhex("24e02ad1c1a9f0798607d4d3d0c7e63c9866ceed5ae84f67b83333a6acada4d124592c62a117ae8fa1921e807928a60d3d5c9704")
recordDecryptor.decrypt(ciphertext)
ciphertext = bytes.fromhex("3c46bba8f9548ed29d829b0a3920a3d51f77ead108387a3f14b001d528af20ffe9ca56ebda0f394df19358807ee8d391542ba88ed6917996fc0a4e89cf28074dcee7dfb7ab4299fb31ca040aaced4019bb73f8511a7ce6d13514a3f4edc4277bb68cb185277c443cee226c6db8a02cee5032abcae26f9a6fa14c89aca24e8004224a82edd0fa061cfa46a6e53ca1a83d83d9b695da90235b6db9611d83304d96f9376292a548c76f5aee9e915f7e29d4edebe03de2158bacf1987c59acaf35b65c6772a92d60b3475694dde4f6ac3a987d69434fd66553ac02554f55ff189d9adb4a0151651a8279a2511555b73d888cad12883070a144be9c3f5a9aa999f6fc889ce8dd49aeb83671393ef5e12f0884b1d8f9b02d57752bf7bd289079863852df5691d18511190de2ecb42ba55a4bff3bfbc3e1a18b6282064c62ba54bf5a49a30f134ca6e6e8c44c4c5a111af61c459d311783393687a5eceed79db00879505e175d4add2cd08762c7ce386bf6cacaf83eb34166e2c33777d3d3d358c010d57f0ab18f1a9cfbdb010d8c36799d51718cfd3daae3723cdcca391001a678e6d3f8a7d0e6aebf4a4f4bd279d018c71bb762c98f5816ec0926259d1f6004edafb6b6291e049f986bae8a2cdfba059408b9e6209c2fbac6b26b6cf0f8cbec4ecb71f2a3d30bbe411c66d955a0ee9c8fd12284641497fb0036c14b1c9c4567e409316e3271b8027ec4c4347b63ca3ecd4859a66ea5451f5418c9b43f2cc9b5c48172e549d20be6b96c938ac75f95481e054f53e02883dd1082cee405ca5b50dc4aa6b21e9e3b1c6422b451ac23013dc3e6cf8d419fb59391d25ca401be88b632095bbd374fc6aee82bb7bd533d884c24d08f57af5fff914e12019935ca34563256178cb82a53c894abde70770ddf3b0ba53eb49afd9559069d0a884d29100a4e731d1503438cc585967951929cf926646a06d2426ed0c4f98af062e715a87b07c27e308f8ca1687cdca91cc822483b63ca5690df38a4c7ec489a7a9df225a552cba5db3154b786fb8dec3a87ab93144d07f3f8206bfdfd29b48e8ab41dc9bb1c969a9207e1e51188f576ff90d2b092de22b290d608443dd11559bda19574791058deab7a736d552976eebbaed73522878af6c93ac15d7b63a512184b40b5b3d3dbfb395ec0cfa0043d6b95cd7e639f7a18f40befa6c3bb43d1b0850a1ad79a4e231c436a70d668736f3ac6788880b4623f9ff42b7b158f67c363e930017346d4b0c1895afc5a3dd02eff69311f024bbf10329c125fe294a91411228cde3adc6050f5134be176371595f2869fdcc9d02d0bbe3db0ae5593dca4bc54f42e285be332c46d19d05d2cd90f04556af9d6b418117bf27ab0f3f889c5c5e67addd086a326e0965283791a0b9cf63fda21c6a6bc1e96ecdf4e0757601bf67fa679cb6c1332487d91ff75a8e8d6e391c42d40ef847235d22d0086f311b60487a1dfbc163d5ceb61b75e1ed160cee8f52e81a3b6c20c3f96afbc80d41adae4a1a6677b6b129e1f05daeebfc9d754cd66600c16fea1cfd339073d18d8edf1ae7016ebb9dfb0c122541a844ea247967580e244b28bcefbd274407511f6f9cb60bc9e2cfec9960a91eb864b47a0eb4ecf90ab07519022dcad0f5ea7805252f90aaa8f9816727af0cfcc8e7850ee0bf33225009b4b8ed2d363c17e4836e97edc25c00fae6a72887305a4cd35fbbb8f68c1f3186439eae3bbbd300b30a571b1f08ca45a4ede6ddee61024c32ed6e9f415889a3b717d17b6a05a565bbdea98c17bc84522d1a076af93fc743223fa002774ec35e609d71be08fcec8cc08c195fb839b0a0d335df4dcebc211fc39a29ef40b676927d5726c7842402f8964a92d0fe972db9dc9c070c666858b322ad850c6b8b8c63ef5e69a0f8915296c17451a525b60afcb48ee83b0f766a9c08a9f3d1ac24e227b0c1a0b82dcc91e06a7e49227e07ff4a82ff6b1991c50c3e05dde90c76a284c5212101ceee52ec1805c5d7940cdb2e9bd39f7df43d649c03d59d3c5d19bf00160640989ba19a3eeced3b781aee2f7bc932aca1fce85000dfdb947d1bcaa3a4df911cb3dd8545e52de658ae2808875dd2d5b2309bc40b29781a5952d5b32527888bda6b2188dc9b0b429e7938786706325f4d8b583b31acfd90182f7047f8c53815a62601163dc1ee943da7cb657f139d2f787cfd6f6a92a80ccede0affd24edd41e962d53543c714928fe74ab6d3dc2e18c1c41cef61d8de5e4a9bf7dcd7a34751bf1a0fcddaab2e2e84bed3ae0515c62ecb87636a311c483f30adb7bde0a10e51f929fa6856500294af059f1dfd7f9ebf94f6071a2fe08c9610e53f4ef73be8c4b9a4d3d2b17b39ec39cbadb252811430cf387a0ac3d946914b904818646f47847335a8d774c0987a209e1e1af8341bb39916e96e99ba399ab2856540cd95da3910ea8432c7160d6233b6afde53c01f3fbbd009a8adaf48d0ba6964b8692e47f7ee28855898664130dc6f8fc9113793546717e7e722c9423e87444cfb9c1920154848b4f7dce54678356cf7ded43612eeceeb2ff15cd4933bcced68b80af310f3a1cdff57bd9274d15a4364b75947ef055079854a50d2a043399d25770cc11a6b4960fac1c1e4aedf9340bbd6690896794ebba5c9755adf74e864322d7d0469b4ab235d2bc1882f77d747120572adf57ddfcf6d9e03fc8dde3cbd09ad5e14d7cf286b35b27e513358cef9e0f3c3e444e40aedcadca8c628d773de39c291976670a369d42c6b603be1e77147c76719034b46eb23bcf142a6483563c0586febeac45863a370eaec181cf1f9b78ccc428817b77942b75f282c2315f647270745420c4d1c7772676086b50641a87ca370a23d0639eb6a97b5db3e8dfdea69ae1320558c7cc28056426c7b24a2b736d663efe0841d96a2eb312f5c5fa15e0f142bf3a04664ca706e24ed76bc510061066548a7e3440be127b4aa0fa7ec292d953937af331039f6d05f0f9140955660aca357bd3631aa04ba8c080bd3367d72cf4d04be6d787f0d81578500e00ff185f5482940bfe9f2ef302727b38c5b203a6e9f4c246dfeafae7028802663f9664c3b63e4d9bb5be158667c082a388b56524415e7b542bbe28c4a3e6c6f551779b49c79b20fee36e8320b7ec662c898e0c00bda9ce7f5e0a031fb19f0162ea56cd61ec60c4ad6822bd37af10bf8b89adc903839a35b8ea783ff123714e27a4fb63fbbd1d36be8c2f8cc171ed07a1cd89319335d02dd2cc3c0c7749f06969ab85503e6e4bcbabad37bb3c6baa924a915abd62000c9a3d6e35caa9ab4d28f3e518cbcca86da3d8c4ba2365")
recordDecryptor.decrypt(ciphertext)
ciphertext = bytes.fromhex("d4ba3fcc5542711ae0318e25c2af5d17ae18706838a1c1526a0341d1b07bda5e7bc49e509f4df55164608df0c2b6cf3439bfa8140d201c16017371c77534e00ea65f760d120f1265bc21c5fb20c4e6cf322e5acbd64ab71fea8d16d22d06503f26")
recordDecryptor.decrypt(ciphertext)
#print(f"Decrypted: {decrypted.hex()}")

